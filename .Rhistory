require(devtools)
devtools()
devtools::document()
install.packages(c("lmer", "lmertest", "spsurvey"))
install.packages("lme4")
install.packages("lmerTest")
df <- read.csv('//lar-file-srv/Data/NPS/Trend/SEKIANC.csv')
dim(df)
df <- read.csv('//lar-file-srv/Data/NPS/Trend/SEKIANC.csv')
save(df,file='//lar-file-srv/Data/NPS/Trend/data/SEKIANC.rda'))
save(df,file='//lar-file-srv/Data/NPS/Trend/data/SEKIANC.rda')
devtools::document()
install.packages("lme4")
require(lme3)
require(lme4)
install.packages("lme4")
require(lme4)
install.packages("lme4")
require(lme4)
.library()
.libPaths()
.libPaths()[1]
require(lme4)
help(require)
require(lme4,lib.loc="C:/Users/jmitchell/Documents/R/win-library/3.2.3")
require(lme4,lib.loc="C:/Users/jmitchell/Documents/R/win-library/3.2.3/")
require(lazyeval)
require(lme4)
install.packages("lme4")
devtools::document()
devtools::document()
devtools::document()
help(lmer)
devtools::document()
help(buildpackage)
??buildpackage
build(manual=TRUE)
require(devtools)
build(manual=TRUE)
build(manual=TRUE,binary=TRUE)
build(manual=TRUE,binary=TRUE)
build(manual=TRUE,binary=TRUE)
build(manual=TRUE,binary=TRUE)
build(manual=TRUE)
check(manual=TRUE)
check(manual=TRUE)
help(check)
check(cran=TRUE,manual=TRUE)
check(cran=TRUE,manual=TRUE)
help(VarCorr)
help(coef)
help(LinearizationVar)
??LinearizationVar
TrendNPS_Cont<-function(dat,method,slope=TRUE,type=NA,stratum=NA,Y,lat=NA,long=NA,stage1wt=NA,stage2wt=NA,str1prop=NA,nbhd=TRUE) {
# dat = data set for trend analysis
# dat must contain fields for Site, WYear (scalar year value), and Year (year factor)
# other covariate fields in dat may be used in the trend model, but WYear must be used to estimate trend
# Calculates a trend model specified by method:
# 'PO' = Piepho and Ogutu (2002) unreplicated linear mixed model
# 'SLRDB' =
# 'WLRDB' =
# 'PWIGLS' = probability-weighted iterative generalized least squares (Pfeffermann et al. 1998, Asparouhov 2002)
#    PWIGLS requires the input, type =
#    'Aonly' = probability weighting but no scaling at either stage
#    'A' = scales panel weights with the mean site-level design weight
#    'AI' = scales panel weights with the mean site-level design weight, but removes site-level scaling
#    'B' = scales panel weights with the effective mean site-level design weight
#    'BI' = scales panel weights with the effective mean site-level design weight, but removes site-level scaling
#    'C' = scales only at the year level with the inverse of the average year-level weight
# Inputs needed for SLRDB and WLRDB methods
# stratum = column name of stratification variable in dat
#    stratum is used directly in the SLRDB and WLRDB approaches
#    The stratification variable must be included in the fe input for methods PO and PWIGLS
# Y = column name of the outcome of interest for design-based estimates
# lat = column name of the latitude
# long = column name of the longitude
# Inputs needed for PWIGLS method
# stage1wt = weight from the sampling design, adjusted for frame and/or nonresponse error if needed
# stage2wt = panel weight from temporal revisit design
# srt1prop = proportion of the population represented by stratum 1 in a two-level stratification variable
#   str1 will be the stratum listed first when stratum levels are ordered alphabetically.
# requires package lme4, lmerTest, spsurvey
# Calculate sample sizes
Sites = sort(unique(dat$Site))
ma = length(Sites)
Years = as.character(sort(unique(dat$Year)))
WYears = sort(unique(dat$WYear))
mb = length(WYears)
# Assign stratum
if(!is.na(stratum)) dat$Stratum <- dat[,stratum]
############################################################################################
# METHOD PO: Piepho & Ogutu (2002) linear mixed model
# Unreplicated model - one observation per Year and Site
############################################################################################
if(method %in% c("PO","PWIGLS")) {
# create a logged outcome of interest
dat$LogY = log(dat[,Y])
if(is.na(stratum)) {
if(slope) fit<-lmer(LogY ~ WYear + (1|Year) +(1+WYear|Site), data=dat)
if(!slope) fit<-lmer(LogY ~ WYear + (1|Year) +(1|Site), data=dat)
}
if(!is.na(stratum)) {
if(slope) fit<-lmer(LogY ~ WYear + Stratum+ (1|Year) +(1+WYear|Site), data=dat)
if(!slope) fit<-lmer(LogY ~ WYear + Stratum+ (1|Year) +(1|Site), data=dat)
}
if(method=="PWIGLS") {
fit_PO = fit
rm(fit)
}
if(method=="PO") {
mu<- summary(fit)$coef[1,1]
trend<- summary(fit)$coef[2,1]
SEtrend<- summary(fit)$coef[2,2]
if(slope) sig2a<- VarCorr(fit)$Site[1,1]		# var(ai)
if(!slope) sig2a<- VarCorr(fit)$Site			# var(ai)
if(slope) {
sig2t<- VarCorr(fit)$Site[2,2]		# var(ti)
sigat<- VarCorr(fit)$Site[1,2]		# cov(ai,ti)
}
if(!slope) sig2t<- sigat<- 0
sig2e<- attr(VarCorr(fit),"sc")^2
eta<- summary(fit)$coef[2,3]
#q.t<-qt(1-(alfa/2),eta)
}
}		# End PO
###############################################################################
# Methods SLRDB and WLRDB: Simple linear regression on annual design-based estimates
# SLRDB: unweighted
# WLRDB: weighted by inverse of variance of each annual estimate
###############################################################################
if(method %in% c("SLRDB","WLRDB")) {
MeanEsts=data.frame(matrix(NA,mb,3))
MeanEsts[,1] <- Years
# Calculate annual design-based status estimates of the mean
for (g in 1:mb) {
dat.g<-dat[dat$WYear==WYears[g],]
if(is.na(stratum)) {
ests <-cont.analysis(
sites=data.frame(siteID=dat.g$Site, rep(TRUE,nrow(dat.g))),
subpop= data.frame(siteID=dat.g$Site, Popn1=rep(1, nrow(dat.g))),
design= data.frame(siteID=dat.g$Site,
wgt= dat.g$wgt, xcoord = dat.g[,long], ycoord = dat.g[,lat]),
data.cont= data.frame(siteID=dat.g$Site, Y=dat.g[,Y]), conf=90, vartype=ifelse(nbhd,"Local","SRS"))
MeanEsts[g,2:3] <-ests$Pct[ests$Pct$Statistic=="Mean",6:7]
}
if(!is.na(stratum)) {
ests <-cont.analysis(
sites=data.frame(siteID=dat.g$Site, rep(TRUE,nrow(dat.g))),
subpop= data.frame(siteID=dat.g$Site, Popn1=rep(1, nrow(dat.g))),
design= data.frame(siteID=dat.g$Site,
wgt= dat.g$wgt, xcoord = dat.g[,long], ycoord = dat.g[,lat], stratum=dat.g[,stratum]),
data.cont= data.frame(siteID=dat.g$Site, Y=dat.g[,Y]), conf=90, vartype=ifelse(nbhd,"Local","SRS"))
MeanEsts[g,2:3] <-ests$Pct[ests$Pct$Statistic=="Mean",6:7]
}
}
MeanEsts[,3] <- as.numeric(MeanEsts[,3])
names(MeanEsts) <- c("Year","Est.Mean","SE")
MeanEsts$WYear = WYears
# calculate trend in logged mean over time
if(method=="SLRDB")  fit<-lm(log(Est.Mean) ~ WYear, data=MeanEsts)
if(method=="WLRDB")  fit<-lm(log(Est.Mean) ~ WYear, weights=1/(SE^2), data=MeanEsts)
mu <- coef(fit)[1]				# mu
trend<- coef(fit)[2]				# slope
SEtrend<-sqrt(vcov(fit)[2,2])			# SE
sig2a<- sig2t<- sigat<- sig2b<- 0
sig2e<- (summary(fit)$sigma)^2
eta<-summary(fit)$df[2]
#q.t <- qt(1-(alfa/2),eta)
}  # End SLRDB/WLRDB
############################################################################################
# PWIGLS methods
############################################################################################
if(method=="PWIGLS") {
if(!type %in% c("Aonly","A","AI","B","BI","C")) return("PWIGLS scaling type not recognized.")
fit<-PWIGLS_ALL(Z=getME(fit_PO,"Z"),dat=dat,stage1wt=stage1wt,stage2wt=stage2wt,type=type,stratum=stratum,slope=slope)
#	fit<-fit[[1]]
mu<- fixef(fit)[1]				# intercept
if(slope) {
sig2a<- VarCorr(fit)$Site[1,1]		# var(ai)
sig2t<- VarCorr(fit)$Site[2,2]		# var(ti)
sigat<- VarCorr(fit)$Site[1,2]		# cov(ai,ti)
sig2b<- VarCorr(fit)$Year[1]			# var(bj)
sig2e<- attr(VarCorr(fit),"sc")^2		# var(eij)
}
if(!slope) {
sig2a<- VarCorr(fit)$Site[1]			# var(ai)
sig2t<- sigat<- 0
sig2b<- VarCorr(fit)$Year[1]			# var(bj)
sig2e<- attr(VarCorr(fit),"sc")^2		# var(eij)
}
varij = sig2a + sig2b + dat$WYear*sigat +(dat$WYear^2)*sig2t +sig2e
if(is.na(stratum)) {		# No strata
trend<- fixef(fit)[2]				# slope
eta<- summary(fit_PO)$coef[2,3]		# Use PO df
# Linearization variance -- Pfeffermann 1988
SEtrend<-sqrt(LinearizationVar(Site=dat$Site,
wij=dat[,stage1wt]*dat[,stage2wt],
xij=dat$WYear,
eij=dat$LogY-mu-(trend*dat$WYear),
varYij=varij))
}	# END No strata
if(!is.na(stratum))  {		# Stratification with two levels
trend1<- fixef(fit)[2]				# slope of stratum 1
trend2<- fixef(fit)[4]				# slope of stratum 2 - slope of stratum 1
trend=trend1 + (1-str1prop)*trend2		# population estimate of trend
eta<- sum(summary(fit_PO)$coef[c(2,4),3])	# Use PO df - sum of df for two trend coefs
Ind1 = as.numeric(dat$Stratum==levels(dat$Stratum)[1])
SEtrend<-sqrt(LinearizationVar_StRS(Site=dat$Site,
wij=dat$wgt*dat$Stage2wt,
xij=data.frame(dat$WYear,Ind1),
eij=dat$LogY-mu-(trend1*dat$WYear)-(fixef(fit)[3]*Ind1)-(trend2*dat$WYear*Ind1),
varYij=varij,
str1prop=str1prop))
}   # END Stratification with two levels
}			# End PWIGLS
ans=data.frame(mu,trend,SEtrend,sig2a,sig2t,sigat,sig2b,sig2e,eta)	# ,q.t
names(ans)=c('mu','trend','SEtrend','sig2a','sig2t','sigat','sig2b','sig2e','eta')
rownames(ans) = NULL
return(ans)
}
data(SEKIANC)
sek <- data(SEKIANC)
head(sek)
sek
SEKIANC
install.packages("L:/NPS/TrendNPS_0.0.1.zip", repos = NULL, type = "win.binary")
help(TrendNPS)
help(SEKIANC)
data(SEKIANC)
kk <- data(SEKIANC)
kk
datasets
document()
document()
check(cran=TRUE,manual=TRUE)
document()
check(cran=TRUE,manual=TRUE)
help(VarCorr)
help(SE)
help(getME)
document()
document()
document()
check(cran=TRUE,manual=TRUE)
require(TrendNPS)
datasets(SEKIANC)
data(SEKIANC)
help(data)
data("SEKIANC")
df <- NULL
document()
document()
document()
document()
document()
document()
document()
document()
check(cran=TRUE,manual=TRUE)
document()
check(cran=TRUE,manual=TRUE)
data(SEKIANC)
ugh <- data(SEKIANC)
ugh
ugh <- data(SEKIANC,"ugh")
data(SEKIANC,"ugh")
data()
df
hi <- data(SEKIANC)
hi
class(hi)
detach("package:Trend", unload=TRUE)
detach("package:TrendNPS", unload=TRUE)
install.packages("L:/NPS/TrendNPS_0.0.1.zip", repos = NULL, type = "win.binary")
data(SEKIANC)
x <- SEKIANC
ls(rm=all())
rm(ls=all())
rm(list = ls())
data(SEKIANC)
dim(df)
data("SEKIANC")
document()
rm(list = ls())
detach("package:TrendNPS", unload=TRUE)
check(manual=TRUE)
check(manual=TRUE)
install.packages("L:/NPS/TrendNPS_0.0.1.zip", repos = NULL, type = "win.binary")
detach("package:TrendNPS", unload=TRUE)
install.packages("L:/NPS/TrendNPS_0.0.1.zip", repos = NULL, type = "win.binary")
data(SEKIANC)
SEKIANC <- df
rm(list = ls())
document()
check(manual=TRUE)
tools::showNonASCII( readLines(PWIGLS_All.Rd))
tools::showNonASCII( readLines("PWIGLS_All.Rd"))
tools::showNonASCII( readLines("//LAR-FILE-SRV/Data/NPS/Trend/man/PWIGLS_All.Rd"))
help(VarCorr)
document()
check(manual=TRUE)
help(coef)
check(manual=TRUE)
document()
check(manual=TRUE)
tools::showNonASCII( readLines("//LAR-FILE-SRV/Data/NPS/Trend/man/TrendNPS_Cont.Rd"))
document()
check(manual=TRUE)
head(df)
data(SEKIANC)
dat <- df
method <- "PO"
slope <- TRUE
type <- NA
stratum <- NA
Y <- "Y"
lat <- "Lat"
long <- "Long"
stage1wt <- "wgt"
stage2wt <- "Panelwgt"
str1prop <- NA
nbhd <- TRUE
# Calculate sample sizes
Sites = sort(unique(dat$Site))
ma = length(Sites)
Years = as.character(sort(unique(dat$Year)))
WYears = sort(unique(dat$WYear))
mb = length(WYears)
# Assign stratum
if(!is.na(stratum)) dat$Stratum <- dat[,stratum]
head(df)
aaa <- read.csv("C:/Users/jmitchell/Desktop/SEKIANC.csv")
save(aaa,"//LAR-FILE-SRV/Data/NPS/Trend/data/SEKIANC.rda")
aaa <- read.csv("C:/Users/jmitchell/Desktop/SEKIANC.csv")
save(aaa,"//lar-file-srv/Data/NPS/Trend/data/SEKIANC.rda")
aaa
help(save)
aaa <- read.csv("C:/Users/jmitchell/Desktop/SEKIANC.csv")
save(aaa,file="//lar-file-srv/Data/NPS/Trend/data/SEKIANC.rda")
detach("package:TrendNPS", unload=TRUE)
install.packages("L:/NPS/TrendNPS_0.0.1.zip", repos = NULL, type = "win.binary")
require(TrendNPS)
data(SEKIANC)
dat <- df
method <- "PO"
slope <- TRUE
type <- NA
stratum <- NA
Y <- "Y"
lat <- "Lat"
long <- "Long"
stage1wt <- "wgt"
stage2wt <- "Panelwgt"
str1prop <- NA
nbhd <- TRUE
Sites = sort(unique(dat$Site))
ma = length(Sites)
Years = as.character(sort(unique(dat$Year)))
WYears = sort(unique(dat$WYear))
mb = length(WYears)
head(dat)
head(aaa)
document()
detach("package:TrendNPS", unload=TRUE)
install.packages("L:/NPS/TrendNPS_0.0.1.zip", repos = NULL, type = "win.binary")
require(TrendNPS)
rm(list=ls())
data(SEKIANC)
dat <- df
head(dat)
head(df)
SEKIANC <- read.csv("C:/Users/jmitchell/Desktop/SEKIANC.csv")
save(SEKIANC,file="//lar-file-srv/Data/NPS/Trend/data/SEKIANC.rda")
detach("package:TrendNPS", unload=TRUE)
install.packages("L:/NPS/TrendNPS_0.0.1.zip", repos = NULL, type = "win.binary")
require(TrendNPS)
head(SEKIANC)
dat <- SEKIANC
method <- "PO"
slope <- TRUE
type <- NA
stratum <- NA
Y <- "Y"
lat <- "Lat"
long <- "Long"
stage1wt <- "wgt"
stage2wt <- "Panelwgt"
str1prop <- NA
nbhd <- TRUE
# Calculate sample sizes
Sites = sort(unique(dat$Site))
ma = length(Sites)
Years = as.character(sort(unique(dat$Year)))
WYears = sort(unique(dat$WYear))
mb = length(WYears)
# Assign stratum
if(!is.na(stratum)) dat$Stratum <- dat[,stratum]
if(method %in% c("PO","PWIGLS")) {
# create a logged outcome of interest
dat$LogY = log(dat[,Y])
if(is.na(stratum)) {
if(slope) fit<-lmer(LogY ~ WYear + (1|Year) +(1+WYear|Site), data=dat)
if(!slope) fit<-lmer(LogY ~ WYear + (1|Year) +(1|Site), data=dat)
}
if(!is.na(stratum)) {
if(slope) fit<-lmer(LogY ~ WYear + Stratum+ (1|Year) +(1+WYear|Site), data=dat)
if(!slope) fit<-lmer(LogY ~ WYear + Stratum+ (1|Year) +(1|Site), data=dat)
}
if(method=="PWIGLS") {
fit_PO = fit
rm(fit)
}
if(method=="PO") {
mu<- summary(fit)$coef[1,1]
trend<- summary(fit)$coef[2,1]
SEtrend<- summary(fit)$coef[2,2]
if(slope) sig2a<- VarCorr(fit)$Site[1,1]		# var(ai)
if(!slope) sig2a<- VarCorr(fit)$Site			# var(ai)
if(slope) {
sig2t<- VarCorr(fit)$Site[2,2]		# var(ti)
sigat<- VarCorr(fit)$Site[1,2]		# cov(ai,ti)
}
if(!slope) sig2t<- sigat<- 0
sig2e<- attr(VarCorr(fit),"sc")^2
eta<- summary(fit)$coef[2,3]
#q.t<-qt(1-(alfa/2),eta)
}
}
sessionInfo()
help(lmerTest::lmer)
help(lmerTest::lmer)
